# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T11:30:01+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Header, Path, Query
from pydantic import conint, constr

from models import (
    AccessDeniedException,
    AssociateUserToPermissionGroupResponse,
    ConflictException,
    CreateChangesetResponse,
    CreateDatasetResponse,
    CreateDataViewResponse,
    CreatePermissionGroupResponse,
    CreateUserResponse,
    DatasetsDatasetIdChangesetsv2ChangesetIdPutRequest,
    DatasetsDatasetIdChangesetsv2PostRequest,
    DatasetsDatasetIdDataviewsv2PostRequest,
    Datasetsv2DatasetIdPutRequest,
    Datasetsv2PostRequest,
    DeleteDatasetResponse,
    DeletePermissionGroupResponse,
    DisableUserResponse,
    DisassociateUserFromPermissionGroupResponse,
    EnableUserResponse,
    GetChangesetResponse,
    GetDatasetResponse,
    GetDataViewResponse,
    GetExternalDataViewAccessDetailsResponse,
    GetPermissionGroupResponse,
    GetProgrammaticAccessCredentialsResponse,
    GetUserResponse,
    GetWorkingLocationResponse,
    InternalServerException,
    LimitExceededException,
    ListChangesetsResponse,
    ListDatasetsResponse,
    ListDataViewsResponse,
    ListPermissionGroupsByUserResponse,
    ListPermissionGroupsResponse,
    ListUsersByPermissionGroupResponse,
    ListUsersResponse,
    PermissionGroupPermissionGroupIdPutRequest,
    PermissionGroupPermissionGroupIdUsersUserIdPostRequest,
    PermissionGroupPostRequest,
    ResetUserPasswordResponse,
    ResourceNotFoundException,
    ThrottlingException,
    UpdateChangesetResponse,
    UpdateDatasetResponse,
    UpdatePermissionGroupResponse,
    UpdateUserResponse,
    UserPostRequest,
    UserUserIdDisablePostRequest,
    UserUserIdEnablePostRequest,
    UserUserIdPasswordPostRequest,
    UserUserIdPutRequest,
    ValidationException,
    WorkingLocationV1PostRequest,
)

app = MCPProxy(
    contact={
        'email': 'mike.ralphson@gmail.com',
        'name': 'Mike Ralphson',
        'url': 'https://github.com/mermade/aws2openapi',
        'x-twitter': 'PermittedSoc',
    },
    description=' The FinSpace APIs let you take actions inside the FinSpace.',
    license={'name': 'Apache 2.0 License', 'url': 'http://www.apache.org/licenses/'},
    termsOfService='https://aws.amazon.com/service-terms/',
    title='FinSpace Public API',
    version='2020-07-13',
    servers=[
        {
            'description': 'The FinSpace Data multi-region endpoint',
            'url': 'http://finspace-api.{region}.amazonaws.com',
            'variables': {
                'region': {
                    'default': 'us-east-1',
                    'description': 'The AWS region',
                    'enum': [
                        'us-east-1',
                        'us-east-2',
                        'us-west-1',
                        'us-west-2',
                        'us-gov-west-1',
                        'us-gov-east-1',
                        'ca-central-1',
                        'eu-north-1',
                        'eu-west-1',
                        'eu-west-2',
                        'eu-west-3',
                        'eu-central-1',
                        'eu-south-1',
                        'af-south-1',
                        'ap-northeast-1',
                        'ap-northeast-2',
                        'ap-northeast-3',
                        'ap-southeast-1',
                        'ap-southeast-2',
                        'ap-east-1',
                        'ap-south-1',
                        'sa-east-1',
                        'me-south-1',
                    ],
                }
            },
        },
        {
            'description': 'The FinSpace Data multi-region endpoint',
            'url': 'https://finspace-api.{region}.amazonaws.com',
            'variables': {
                'region': {
                    'default': 'us-east-1',
                    'description': 'The AWS region',
                    'enum': [
                        'us-east-1',
                        'us-east-2',
                        'us-west-1',
                        'us-west-2',
                        'us-gov-west-1',
                        'us-gov-east-1',
                        'ca-central-1',
                        'eu-north-1',
                        'eu-west-1',
                        'eu-west-2',
                        'eu-west-3',
                        'eu-central-1',
                        'eu-south-1',
                        'af-south-1',
                        'ap-northeast-1',
                        'ap-northeast-2',
                        'ap-northeast-3',
                        'ap-southeast-1',
                        'ap-southeast-2',
                        'ap-east-1',
                        'ap-south-1',
                        'sa-east-1',
                        'me-south-1',
                    ],
                }
            },
        },
        {
            'description': 'The FinSpace Data endpoint for China (Beijing) and China (Ningxia)',
            'url': 'http://finspace-api.{region}.amazonaws.com.cn',
            'variables': {
                'region': {
                    'default': 'cn-north-1',
                    'description': 'The AWS region',
                    'enum': ['cn-north-1', 'cn-northwest-1'],
                }
            },
        },
        {
            'description': 'The FinSpace Data endpoint for China (Beijing) and China (Ningxia)',
            'url': 'https://finspace-api.{region}.amazonaws.com.cn',
            'variables': {
                'region': {
                    'default': 'cn-north-1',
                    'description': 'The AWS region',
                    'enum': ['cn-north-1', 'cn-northwest-1'],
                }
            },
        },
    ],
)


@app.get(
    '/credentials/programmatic#environmentId',
    description=""" Request programmatic credentials to use with FinSpace SDK. """,
    tags=['programmatic_access_credentials'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_programmatic_access_credentials(
    duration_in_minutes: Optional[conint(ge=60, le=720)] = Query(
        None, alias='durationInMinutes'
    ),
    environment_id: constr(min_length=1, max_length=26) = Query(
        ..., alias='environmentId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/datasets/{datasetId}/changesetsv2',
    description=""" Lists the FinSpace Changesets for a Dataset. """,
    tags=['dataset_operations', 'data_view_handling', 'changeset_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_changesets(
    dataset_id: constr(min_length=1, max_length=26) = Path(..., alias='datasetId'),
    max_results: Optional[conint(ge=1, le=100)] = Query(None, alias='maxResults'),
    next_token: Optional[str] = Query(None, alias='nextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/datasets/{datasetId}/changesetsv2',
    description=""" Creates a new Changeset in a FinSpace Dataset. """,
    tags=['changeset_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_changeset(
    dataset_id: constr(min_length=1, max_length=26) = Path(..., alias='datasetId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DatasetsDatasetIdChangesetsv2PostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/datasets/{datasetId}/changesetsv2/{changesetId}',
    description=""" Get information about a Changeset. """,
    tags=['changeset_handling', 'dataset_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_changeset(
    dataset_id: constr(min_length=1, max_length=26) = Path(..., alias='datasetId'),
    changeset_id: constr(min_length=1, max_length=26) = Path(..., alias='changesetId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/datasets/{datasetId}/changesetsv2/{changesetId}',
    description=""" Updates a FinSpace Changeset. """,
    tags=['changeset_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_changeset(
    dataset_id: constr(min_length=1, max_length=26) = Path(..., alias='datasetId'),
    changeset_id: constr(min_length=1, max_length=26) = Path(..., alias='changesetId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DatasetsDatasetIdChangesetsv2ChangesetIdPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/datasets/{datasetId}/dataviewsv2',
    description=""" Lists all available Dataviews for a Dataset. """,
    tags=['dataset_operations', 'changeset_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_data_views(
    dataset_id: constr(min_length=1, max_length=26) = Path(..., alias='datasetId'),
    next_token: Optional[str] = Query(None, alias='nextToken'),
    max_results: Optional[conint(ge=1, le=100)] = Query(None, alias='maxResults'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/datasets/{datasetId}/dataviewsv2',
    description=""" Creates a Dataview for a Dataset. """,
    tags=['data_view_handling', 'dataset_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_data_view(
    dataset_id: constr(min_length=1, max_length=26) = Path(..., alias='datasetId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DatasetsDatasetIdDataviewsv2PostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/datasets/{datasetId}/dataviewsv2/{dataviewId}',
    description=""" Gets information about a Dataview. """,
    tags=[
        'data_view_handling',
        'dataset_operations',
        'programmatic_access_credentials',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_data_view(
    dataview_id: constr(min_length=1, max_length=26) = Path(..., alias='dataviewId'),
    dataset_id: constr(min_length=1, max_length=26) = Path(..., alias='datasetId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/datasets/{datasetId}/dataviewsv2/{dataviewId}/external-access-details',
    description=""" <p>Returns the credentials to access the external Dataview from an S3 location. To call this API:</p> <ul> <li> <p>You must retrieve the programmatic credentials.</p> </li> <li> <p>You must be a member of a FinSpace user group, where the dataset that you want to access has <code>Read Dataset Data</code> permissions.</p> </li> </ul> """,
    tags=[
        'programmatic_access_credentials',
        'data_view_handling',
        'dataset_operations',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_external_data_view_access_details(
    dataview_id: constr(min_length=1, max_length=26) = Path(..., alias='dataviewId'),
    dataset_id: constr(min_length=1, max_length=26) = Path(..., alias='datasetId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/datasetsv2',
    description=""" Lists all of the active Datasets that a user has access to. """,
    tags=['programmatic_access_credentials'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_datasets(
    next_token: Optional[str] = Query(None, alias='nextToken'),
    max_results: Optional[conint(ge=1, le=100)] = Query(None, alias='maxResults'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/datasetsv2',
    description=""" Creates a new FinSpace Dataset. """,
    tags=['programmatic_access_credentials'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_dataset(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Datasetsv2PostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/datasetsv2/{datasetId}',
    description=""" Deletes a FinSpace Dataset. """,
    tags=['programmatic_access_credentials', 'dataset_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_dataset(
    client_token: Optional[
        constr(pattern=r'.*\S.*', min_length=1, max_length=128)
    ] = Query(None, alias='clientToken'),
    dataset_id: constr(min_length=1, max_length=26) = Path(..., alias='datasetId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/datasetsv2/{datasetId}',
    description=""" Returns information about a Dataset. """,
    tags=['programmatic_access_credentials'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_dataset(
    dataset_id: constr(
        pattern=r'[\s\S]*\S[\s\S]*', min_length=1, max_length=255
    ) = Path(..., alias='datasetId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/datasetsv2/{datasetId}',
    description=""" Updates a FinSpace Dataset. """,
    tags=['dataset_operations', 'programmatic_access_credentials'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_dataset(
    dataset_id: constr(min_length=1, max_length=26) = Path(..., alias='datasetId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Datasetsv2DatasetIdPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/permission-group',
    description=""" Creates a group of permissions for various actions that a user can perform in FinSpace. """,
    tags=['programmatic_access_credentials'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_permission_group(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: PermissionGroupPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/permission-group#maxResults',
    description=""" Lists all available permission groups in FinSpace. """,
    tags=['programmatic_access_credentials'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_permission_groups(
    next_token: Optional[str] = Query(None, alias='nextToken'),
    max_results: conint(ge=1, le=100) = Query(..., alias='maxResults'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/permission-group/{permissionGroupId}',
    description=""" Deletes a permission group. This action is irreversible. """,
    tags=['permission_group_operations', 'user_account_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_permission_group(
    permission_group_id: constr(pattern=r'.*\S.*', min_length=1, max_length=26) = Path(
        ..., alias='permissionGroupId'
    ),
    client_token: Optional[
        constr(pattern=r'.*\S.*', min_length=1, max_length=128)
    ] = Query(None, alias='clientToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/permission-group/{permissionGroupId}',
    description=""" Retrieves the details of a specific permission group. """,
    tags=[
        'programmatic_access_credentials',
        'permission_group_operations',
        'user_account_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_permission_group(
    permission_group_id: constr(pattern=r'.*\S.*', min_length=1, max_length=26) = Path(
        ..., alias='permissionGroupId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/permission-group/{permissionGroupId}',
    description=""" Modifies the details of a permission group. You cannot modify a <code>permissionGroupID</code>. """,
    tags=['permission_group_operations', 'user_account_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_permission_group(
    permission_group_id: constr(pattern=r'.*\S.*', min_length=1, max_length=26) = Path(
        ..., alias='permissionGroupId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: PermissionGroupPermissionGroupIdPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/permission-group/{permissionGroupId}/users#maxResults',
    description=""" Lists details of all the users in a specific permission group. """,
    tags=['permission_group_operations', 'user_account_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_users_by_permission_group(
    permission_group_id: constr(pattern=r'.*\S.*', min_length=1, max_length=26) = Path(
        ..., alias='permissionGroupId'
    ),
    next_token: Optional[str] = Query(None, alias='nextToken'),
    max_results: conint(ge=1, le=100) = Query(..., alias='maxResults'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/permission-group/{permissionGroupId}/users/{userId}',
    description=""" Removes a user account from a permission group. """,
    tags=['permission_group_operations', 'user_account_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def disassociate_user_from_permission_group(
    permission_group_id: constr(pattern=r'.*\S.*', min_length=1, max_length=26) = Path(
        ..., alias='permissionGroupId'
    ),
    user_id: constr(pattern=r'.*\S.*', min_length=1, max_length=26) = Path(
        ..., alias='userId'
    ),
    client_token: Optional[
        constr(pattern=r'.*\S.*', min_length=1, max_length=128)
    ] = Query(None, alias='clientToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/permission-group/{permissionGroupId}/users/{userId}',
    description=""" Adds a user account to a permission group to grant permissions for actions a user can perform in FinSpace. """,
    tags=['permission_group_operations', 'user_account_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def associate_user_to_permission_group(
    permission_group_id: constr(pattern=r'.*\S.*', min_length=1, max_length=26) = Path(
        ..., alias='permissionGroupId'
    ),
    user_id: constr(pattern=r'.*\S.*', min_length=1, max_length=26) = Path(
        ..., alias='userId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: PermissionGroupPermissionGroupIdUsersUserIdPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/user',
    description=""" Creates a new user in FinSpace. """,
    tags=['programmatic_access_credentials'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_user(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: UserPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user#maxResults',
    description=""" Lists all available user accounts in FinSpace. """,
    tags=['programmatic_access_credentials'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_users(
    next_token: Optional[str] = Query(None, alias='nextToken'),
    max_results: conint(ge=1, le=100) = Query(..., alias='maxResults'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/{userId}',
    description=""" Retrieves details for a specific user. """,
    tags=['programmatic_access_credentials', 'user_account_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_user(
    user_id: constr(pattern=r'.*\S.*', min_length=1, max_length=26) = Path(
        ..., alias='userId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/user/{userId}',
    description=""" Modifies the details of the specified user account. You cannot update the <code>userId</code> for a user. """,
    tags=['user_account_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_user(
    user_id: constr(pattern=r'.*\S.*', min_length=1, max_length=26) = Path(
        ..., alias='userId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: UserUserIdPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/user/{userId}/disable',
    description=""" Denies access to the FinSpace web application and API for the specified user. """,
    tags=['user_account_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def disable_user(
    user_id: constr(pattern=r'.*\S.*', min_length=1, max_length=26) = Path(
        ..., alias='userId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: UserUserIdDisablePostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/user/{userId}/enable',
    description="""  Allows the specified user to access the FinSpace web application and API. """,
    tags=['user_account_management', 'programmatic_access_credentials'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def enable_user(
    user_id: constr(pattern=r'.*\S.*', min_length=1, max_length=26) = Path(
        ..., alias='userId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: UserUserIdEnablePostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/user/{userId}/password',
    description=""" Resets the password for a specified user ID and generates a temporary one. Only a superuser can reset password for other users. Resetting the password immediately invalidates the previous password associated with the user. """,
    tags=['user_account_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def reset_user_password(
    user_id: constr(pattern=r'.*\S.*', min_length=1, max_length=26) = Path(
        ..., alias='userId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: UserUserIdPasswordPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/{userId}/permission-groups#maxResults',
    description=""" Lists all the permission groups that are associated with a specific user account. """,
    tags=['user_account_management', 'programmatic_access_credentials'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_permission_groups_by_user(
    user_id: constr(pattern=r'.*\S.*', min_length=1, max_length=26) = Path(
        ..., alias='userId'
    ),
    next_token: Optional[str] = Query(None, alias='nextToken'),
    max_results: conint(ge=1, le=100) = Query(..., alias='maxResults'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/workingLocationV1',
    description=""" A temporary Amazon S3 location, where you can copy your files from a source location to stage or use as a scratch space in FinSpace notebook. """,
    tags=['programmatic_access_credentials'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_working_location(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: WorkingLocationV1PostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
